1:create table terminate_backend_t (a int) distributed by (a);
CREATE

-- fault on seg1 to block insert command into terminate_backend_t table
select gp_inject_fault('heap_insert', 'infinite_loop', '', '', 'terminate_backend_t', 1, 1, 0, dbid) from gp_segment_configuration where content = 1 and role = 'p';
 gp_inject_fault 
-----------------
 Success:        
(1 row)

-- expect this command to be terminated by 'test pg_terminate_backend'
1&: insert into terminate_backend_t values (1);  <waiting ...>

select gp_wait_until_triggered_fault('heap_insert', 1, dbid) from gp_segment_configuration where content = 1 and role = 'p';
 gp_wait_until_triggered_fault 
-------------------------------
 Success:                      
(1 row)

-- extract the pid for the previous query
SELECT pg_terminate_backend(pid,'test pg_terminate_backend') FROM pg_stat_activity WHERE query like 'insert into terminate_backend_t%' ORDER BY pid LIMIT 1;
 pg_terminate_backend 
----------------------
 t                    
(1 row)

-- EXPECT: session 1 terminated with 'test pg_terminate_backend'
1<:  <... completed>
FATAL:  terminating connection due to administrator command: "test pg_terminate_backend"
server closed the connection unexpectedly
	This probably means the server terminated abnormally
	before or while processing the request.

-- query backend to ensure no PANIC on postmaster
select gp_inject_fault('heap_insert', 'reset', dbid) from gp_segment_configuration where content = 1 and role = 'p';
 gp_inject_fault 
-----------------
 Success:        
(1 row)

-- the table should be empty if insert was terminated
select * from terminate_backend_t;
 a 
---
(0 rows)
1q: ... <quitting>

-- kill psql client and expect QD can sense the event and exit accordingly
!& psql -c "set client_connection_check_interval to 5000; commit; select pg_sleep(1359);" postgres; 2: select count(*) from pg_stat_activity where query='set client_connection_check_interval to 5000; commit; select pg_sleep(1359);';
 count 
-------
 1     
(1 row)
!\retcode kill `ps -ef | grep -v /bin/sh | grep psql | grep client_connection_check_interval | awk '{print $2}' | head -1`;
-- start_ignore

-- end_ignore
(exited with code 0)
2: select pg_sleep(6);
 pg_sleep 
----------
          
(1 row)
2: select count(*) from pg_stat_activity where query='set client_connection_check_interval to 5000; commit; select pg_sleep(1359);';
 count 
-------
 0     
(1 row)
2q: ... <quitting>

